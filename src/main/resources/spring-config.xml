<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns="http://www.springframework.org/schema/beans"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:cache="http://www.springframework.org/schema/cache"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
	   http://www.springframework.org/schema/beans/spring-beans.xsd
	   http://www.springframework.org/schema/context
	   http://www.springframework.org/schema/context/spring-context.xsd
	   http://www.springframework.org/schema/cache
	   http://www.springframework.org/schema/cache/spring-cache.xsd
	   http://www.springframework.org/schema/tx
	   http://www.springframework.org/schema/tx/spring-tx.xsd
	   http://www.springframework.org/schema/aop
	   http://www.springframework.org/schema/aop/spring-aop.xsd">
	<context:annotation-config />
	<context:component-scan  base-package="base.*">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
		<property name="location" value="classpath:jdbc.properties"/>
	</bean>
	<!--定义数据源-->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${driver}"/>
		<property name="jdbcUrl" value="${url}"/>
		<property name="user" value="${username}"/>
		<property name="password" value="${password}"/>
	</bean>
	<!--定义使用hibernate-->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
<!--		<property name="configLocation" value="classpath:hibernate.cfg.xml"/>-->
		<!--注解扫描包-->
		<property name="packagesToScan" value="base.model"/>
		<property name="hibernateProperties">
			<props>
				<prop key="dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
				<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
				<prop key="hibernate.cache.use_query_cache">false</prop>
				<prop key="jdbc.use_scrollable_resultset">false</prop>
			</props>
		</property>
	</bean>
	<!--定义hibernateTemplate-->
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate4.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
<!--
	&lt;!&ndash;配置调度程序&ndash;&gt;
	<bean id="jobBean" class="utils.MakeHtml"/>
	<bean id="jobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="jobBean"/>
		<property name="targetMethod" value="execute"/>

		&lt;!&ndash;将并发设置为false&ndash;&gt;
		<property name="concurrent" value="false"/>
 	</bean>
	<bean id="trigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="jobDetail"/>
		&lt;!&ndash;时间表达式&ndash;&gt;
		<property name="cronExpression" value=""/>
	</bean>
	&lt;!&ndash;总管理类如果将lazy-init =‘false’ 那么容器启动就会执行调度程序&ndash;&gt;
	<bean id="startQuertz" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" lazy-init="false">
		<property name="triggers">
			<list>
				<ref bean="trigger"/>
			</list>
		</property>
	</bean>
-->

	<!--配置事务管理器-->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>

	<!--配置事务的传播特性-->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 事务执行方式
                REQUIRED：指定当前方法必需在事务环境中运行，
                如果当前有事务环境就加入当前正在执行的事务环境，
                如果当前没有事务，就新建一个事务。
                这是默认值。
             -->
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED"/>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="import*" propagation="REQUIRED" />
			<!--hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到-->
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="count*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="list*" propagation="REQUIRED" read-only="true" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false"/>
			<tx:method name="*" propagation="REQUIRED" read-only="true" rollback-for="java.lang.Exception"/>
			<!--
                指定当前方法以非事务方式执行操作，如果当前存在事务，就把当前事务挂起，等我以非事务的状态运行完，再继续原来的事务。
                查询定义即可
                read-only="true"  表示只读
             -->
			<tx:method name="*" propagation="NOT_SUPPORTED" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!-- 定义切面，在 * base.service.*ServiceImpl.*(..) 中执行有关的hibernate session的事务操作 -->
	<aop:config>
		<aop:pointcut id="serviceOperation" expression="execution(* base.serviceImpl.*ServiceImpl.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" />
	</aop:config>
</beans>