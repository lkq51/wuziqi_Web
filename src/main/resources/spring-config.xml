<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns="http://www.springframework.org/schema/beans"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:cache="http://www.springframework.org/schema/cache"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
	   http://www.springframework.org/schema/beans/spring-beans.xsd
	   http://www.springframework.org/schema/context
	   http://www.springframework.org/schema/context/spring-context.xsd
	   http://www.springframework.org/schema/cache
	   http://www.springframework.org/schema/cache/spring-cache.xsd
	   http://www.springframework.org/schema/tx
	   http://www.springframework.org/schema/tx/spring-tx.xsd
	   http://www.springframework.org/schema/aop
	   http://www.springframework.org/schema/aop/spring-aop.xsd">
		<context:annotation-config/>
		<context:component-scan base-package="base"/>
		<!--定义使用hibernate-->
		<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
			<property name="dataSource" ref="dataSource"></property>
			<property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
		</bean>

		<bean id="txManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
			<property name="sessionFactory" ref="sessionFactory"/>
		</bean>
		<!--定义数据源-->
		<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
			<property name="driverClass" value="com.mysql.jdbc.Driver"/>
			<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/wuziqi"/>
			<property name="user" value="root"/>
			<property name="password" value="1994"/>
		</bean>
		<bean id="hibernateTemplate" class="org.springframework.orm.hibernate4.HibernateTemplate">
			<property name="sessionFactory" ref="sessionFactory"></property>
		</bean>
		<!--dao层-->
		<bean id="baseDAO" class="base.dao.BaseDAOImpl">
			<property name="hibernateTemplate" ref="hibernateTemplate"></property>
		</bean>
		<bean id="userDAO" class="base.dao.UserDAOimpl">
			<property name="hibernateTemplate" ref="hibernateTemplate"></property>
		</bean>
		<!--业务层-->
		<bean id="userServiceTarget" class="base.service.UserServiceImpl">
			<property name="userDAO" ref="userDAO"></property>
		</bean>
		<!--表现层-->
		<bean id="loginAction" class="base.action.loginAction">
			<property name="userService" ref="userServiceTarget"></property>
		</bean>
		<!--配置事务管理器-->
		<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
			<property name="sessionFactory" ref="sessionFactory"/>
		</bean>

	<!--配置事务的传播特性-->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 事务执行方式
                REQUIRED：指定当前方法必需在事务环境中运行，
                如果当前有事务环境就加入当前正在执行的事务环境，
                如果当前没有事务，就新建一个事务。
                这是默认值。
             -->
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="import*" propagation="REQUIRED" />
			<!--
                指定当前方法以非事务方式执行操作，如果当前存在事务，就把当前事务挂起，等我以非事务的状态运行完，再继续原来的事务。
                查询定义即可
                read-only="true"  表示只读
             -->
			<tx:method name="*" propagation="NOT_SUPPORTED" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!-- 定义切面，在 * base.service.*ServiceImpl.*(..) 中执行有关的hibernate session的事务操作 -->
	<aop:config>
		<aop:pointcut id="serviceOperation" expression="execution(* base.service.*ServiceImpl.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" />
	</aop:config>
</beans>